//THE CLIENT PROGRAM WILL: 
//Calculate frequency of each symbol in the message
//create a thread for each symbol 
//each thread will send the symbol to the server using sockets then wait for the generated code from the server
// the server will recieve the symbol and create a child process for the symbol
//each child process will generate the bit sequence of the requested symbol and return it to the client using sockets
//the client will recieve the bit sequence generated by the server and output it


#include <fstream>
#include<iomanip>
#include <iostream>
#include<string>
#include<vector>
#include <iostream>
#include<string>
#include <fstream>
#include<iomanip>
#include <algorithm>
#include <stdio.h> 
#include <sys/types.h> 
#define SIZE 26 
#include <unistd.h>
#include <cstring>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

using namespace std;

struct letters
{
	char let;
	int count = 0;
	letters* next;
};

//CREATES LINKED LIST 
class s
{
private:
	letters* head, * tail;
public:
	s()
	{
		head = NULL;
		tail = NULL;
	}
	void push(char a);
	void Frequency();
	void Bits(string str);
};

//PUTS CHARACTER INTO LINKED LIST AND COUNTS FREQUENCY
void s::push(char a)
{
	bool f = false;
	letters* temp = new letters;
	if (head == NULL)
	{
		temp->let = a;
		temp->next = NULL;
		head = temp;
		tail = temp;
	}
	temp = head;
	while (temp != NULL)
	{
		if (temp->let == a)
		{
			f = true;
			temp->count += 1;
			return;
		}
		temp = temp->next;
	}
	letters* node = new letters;
	node->let = a;
	node->count += 1;
	node->next = NULL;
	tail->next = node;
	tail = node;
}

//PRINTS OUT CHARACTER AND FREQUENCY
void s::Frequency()
{
	letters* temp = new letters;
	temp = head;
	while (temp != NULL)
	{
		cout << temp->let << " frequency: " << temp->count << endl;
		temp = temp->next;
	}
}

//PRINTS OUT ORIGINAL MESSAGE AND FINDS BIT SYMBOL 
void s::Bits(string str)
{
	vector<char>symbol;
	char bino;
	letters* temp = new letters;
	bool started = false;
	cout << "Original message: " << str << endl;
	for (int i = 0; i < str.length(); i++)
	{
		bool found = false;
		if (symbol.size() == 0)
			symbol.push_back(str[i]);
		for (int j = 0; j < symbol.size(); j++)
		{
			if (str[i] == symbol[j])
				found = true;
		}
		if (!found)
			symbol.push_back(str[i]);
	}
	while (symbol.size() != 0)
	{
		if (started)
		{
			cout << "Remaining Message: ";
			for (int i = 0; i < str.length(); i++)
			{
				for (int j = 0; j < symbol.size(); j++)
				{
					if (str[i] == symbol[j])
						cout << str[i];
				}
			}
		}
		cout << "\nSymbol " << symbol.front() << " code: ";
		for (int i = 0; i < str.length(); i++)
		{
			for (int j = 0; j < symbol.size(); j++)
			{
				if (str[i] == symbol[j])
				{
					if (str[i] == symbol.front())
						cout << "1";
					else
						cout << "0";
				}
			}
		}
		cout << endl;
		symbol.erase(symbol.begin());
		started = true;
	}

}

int main()
{
	s object;
	string str;
	getline(cin,str,'\0');
	
	//string str = "111111aaaannnaaakkllaa1111111111111111aaapAAA221";
	for (int i = 0; i < str.length(); i++)
	{
		object.push(str[i]);
	}
	//object.Frequency();
	object.Bits(str);

	return 0;
}